import java.io.*;
import java.net.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.util.*;

/**
 * SMTPServer ... goes with SMTPClient
 * Allows multiple connect/send/disconnect cycles
 * As many clients as we wish ... one thread per client
 * @author Kyrren Love, Brenden Apo, Viskalakhi Natulapati & Anthony Fierce
 * @version 9-16-2017
 */
public class SMTPServer2 extends JFrame 
{
   // GUI Components
   private JButton jbStart = new JButton("Start");
   private JTextArea jtaLog = new JTextArea(10, 35);
   public static final long serialVersionUid = 01L;

   // Socket stuff
   private ServerSocket sSocket = null;
   public static final int SERVER_PORT = 42069;
   private ObjectOutputStream oos = null;
   private ObjectInputStream ois = null;
   
   private ServerThread serverThread = null;
   private char[] alphabet = new char[26];
   String letters = "abcdefghijklmnopqrstuvwxyz";
   private int shift = 3;
   private boolean inval = true;
   
   //client stuff
   private Socket cSocket;
   private PrintWriter fw;
   private String label = "";
   private String nextMessage;
   private String s220="S: 220";//Connect code
   private String s250="S: 250";//Okay
   private String s354="S: 354";//End data of message
   private String s221="S: 221";//goodbye
   
   /**
    * main - main program
    */
   public static void main(String[] args) 
   {
      new SMTPServer2();
   }
   
   /**
    * Constructor, draw and set up GUI
    * Do server stuff
    */
   public SMTPServer2() 
   {
      // Window setup
      this.setTitle("SMTPServer");
      this.setSize(450, 250);
      this.setLocation(600, 50);
      this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      
      // NORTH components (Start/Stop button)
      JPanel jpNorth = new JPanel();
      jpNorth.setLayout(new FlowLayout(FlowLayout.RIGHT));
      jpNorth.add(jbStart);
      this.add(jpNorth, BorderLayout.NORTH);
      jbStart.addActionListener(new ActionListener(){
         public void actionPerformed(ActionEvent ae){
            switch(ae.getActionCommand()) {
               case "Start":
                  doStart();
                  //doRelay();
                  //jtaLog.append("Relay method");
                  break;
               case "Stop":
                  doStop();
                  break;
            }
         }
      } );
   
      // CENTER components
      JPanel jpCenter = new JPanel();
      jpCenter.add(new JScrollPane(jtaLog));
      this.add(jpCenter, BorderLayout.CENTER);
      this.setVisible(true);
   } 
   
   public void doStart(){
     // for(char i = 0; i < 26; i++) {
//       alphabet[i] = (char)('a' + i);
//      } 
      jbStart.setText("Stop");

      serverThread = new ServerThread();
      serverThread.start();
      jtaLog.append("Server started\n");
   }
   
   public void doStop(){
      jbStart.setText("Start");
      serverThread.stopServer();
   }
   
   public void doRelay(/*MailConstants _msg*/){
         //MailConstants relay = _msg;
         try{
            Socket relaySocket = new Socket("129.21.102.209", SERVER_PORT);
            ObjectOutputStream oos2 = new ObjectOutputStream(relaySocket.getOutputStream());
            ObjectInputStream ois2 = new ObjectInputStream(relaySocket.getInputStream());
            String hi = "HI BRENDAN YOU FAILURE";
            oos.writeObject(hi);
            Object read = ois.readObject();
            if(read instanceof String){
               String messages = (String)read;
               jtaLog.append(messages+"\n");
            }
        }
        catch(Exception e){}
   }  
      
   
   /**
    * Class ServerThread
    * A thread used to start the server when the Start button is pressed
    * Also, the stop method will stop the server
    */
   class ServerThread extends Thread{
      public void run(){
         // Server stuff ... wait for a connection and process it
         try{
            sSocket = new ServerSocket(SERVER_PORT);
         }
         catch(IOException ioe){
            jtaLog.append("IO Exception (1): "+ ioe);
            return;
         }
          
         
         while(true){
            // Socket for the client
            Socket cSocket = null;
            
            try{
               // Wait for a connection and set up IO
               cSocket = sSocket.accept();
            }
            catch(IOException ioe){
               // Happens when sSocket is closed in stop (below)
               // and the accept (above) is blocked. This is OK.
               jtaLog.append("IO Exception (2): "+ ioe);
               return;
            }   
            // Create a thread for the client
            ClientThread ct = new ClientThread(cSocket);
            ct.start();
            jtaLog.append("Client thread started\n");    
         }
      }
      
      public void stopServer() 
      {
         try 
         {
            sSocket.close();  // This terminates any blocked accepts
            cSocket.close();
            fw.close();
            jtaLog.append(label + "Client disconnected!\n");
         }
         catch(Exception e) {
            jtaLog.append("Exception: " + e);
         }
      }
      
   }
   
   /**
    * Class ClientThread
    * A thread PER client to do the server side
    * stuff for one client
    */
   class ClientThread extends Thread{
      // Since attributes are per-object items, each ClientThread has its OWN
      // socket, unique to that client
      
      // Constructor for ClientThread
      public ClientThread(Socket _cSocket){
         cSocket = _cSocket;
         label = cSocket.getInetAddress().getHostAddress() + " : " + cSocket.getPort() + " :: ";
      }
      
      // main program for a ClientThread
      public void run(){
         
         jtaLog.append(label + "Client connected!\n");
         
         try{
            // Set up IO
            fw = new PrintWriter(new FileWriter(new File(cSocket.getInetAddress().getHostAddress() + ".txt")));
            oos = new ObjectOutputStream(cSocket.getOutputStream());
            ois = new ObjectInputStream(cSocket.getInputStream());
         }
         catch(IOException ioe){
            jtaLog.append(label + "IO Exception (ClientThread): "+ ioe + "\n");
            return;
         }

         try{
            if(inval==true){
               System.out.println("Serving starting to read lines");
            }
            while(true){
            Object obj = ois.readObject();
               if(obj instanceof String){
                  String message = (String) obj;
                  oos.writeObject(message);
                  if(inval==true){
                     System.out.println("Server read line" + message);
                  }
                  if(message.equals("ISTE121")){System.out.println("Server sending Accepted");oos.writeObject("ACCEPTED");System.out.println("Sent ACCEPTED");}
                  synchronized(jtaLog){
                     jtaLog.append(s220+label + "Received(String): " + message + "\n");
                     jtaLog.append(s220+label + "Replied(Struing): " + message.toUpperCase()+ "\n");
                     fw.println(label + "Received(String): " + message + "\n"+
                     label + "Replied(Struing): " + message.toUpperCase()+ "\n");
                  }//synch
               }
               else if(obj instanceof MailConstants){
                  System.out.println("Recieved mail");
                  MailConstants mail = (MailConstants)obj;
                  
                  Queue<MailConstants> queue = new LinkedList<MailConstants>();
                  queue.add(mail);
                  for(MailConstants m: queue){
                     System.out.println(m);
                  }
                  
                  oos.writeObject("S: 220 " +mail.getFrom()+"");
                  synchronized(jtaLog){
                     jtaLog.append("S"+s250+mail.getFrom()+" "+mail.getTo()+" "+mail.getCC()+" "+mail.getDate()+" "+mail.getSubject()+" "+mail.getMessage()+"\n.");
                     jtaLog.append("Reply"+s250+mail.getFrom()+" "+mail.getTo()+" "+mail.getCC()+" "+mail.getDate()+" "+mail.getSubject()+" "+mail.getMessage()+"\n.");
                     fw.println(mail.getFrom()+" "+mail.getTo()+" "+mail.getCC()+" "+mail.getDate()+" "+mail.getSubject()+" "+mail.getMessage()+"\n.");
                     System.out.println("Processed mail: ");
                  }//synch
               }
            }
         }
         catch(Exception e){}
      }
      
      /**
      * doRelay - turns Server into a Client and forwards the message to another Server.
      **/
      
   } // End of inner class
}

//apo: 129.21.102.209
