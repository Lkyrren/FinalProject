import java.io.*;
import java.net.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.util.*;

/**
 * TCPMTServer ... goes with TCPClient1
 * Allows multiple connect/send/disconnect cycles
 * As many clients as we wish ... one thread per client
 * @author Pete Lutz
 * @version 9-16-2017
 */
public class SMTPServer2 extends JFrame 
{
   // GUI Components
   private JButton jbStart = new JButton("Start");
   private JTextArea jtaLog = new JTextArea(10, 35);
   public static final long serialVersionUid = 01L;

   // Socket stuff
   private ServerSocket sSocket = null;
   public static final int SERVER_PORT = 42069;
   private ObjectOutputStream oos = null;
   private ObjectInputStream ois = null;
   
   private ServerThread serverThread = null;
   private char[] alphabet = new char[26];
   String letters = "abcdefghijklmnopqrstuvwxyz";
   private int shift = 3;
   private boolean inval = true;
   
   //client stuff
   private Socket cSocket;
   private Scanner scn;
   private PrintWriter pwt;
   private PrintWriter fw;
   private String label = "";
   private String nextMessage;
   
   /**
    * main - main program
    */
   public static void main(String[] args) 
   {
      new SMTPServer2();
   }
   
   /**
    * Constructor, draw and set up GUI
    * Do server stuff
    */
   public SMTPServer2() 
   {
      // Window setup
      this.setTitle("SMTPServer");
      this.setSize(450, 250);
      this.setLocation(600, 50);
      this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      
      // NORTH components (Start/Stop button)
      JPanel jpNorth = new JPanel();
      jpNorth.setLayout(new FlowLayout(FlowLayout.RIGHT));
      jpNorth.add(jbStart);
      this.add(jpNorth, BorderLayout.NORTH);
      jbStart.addActionListener(new ActionListener() 
      {
         public void actionPerformed(ActionEvent ae)
         {
            switch(ae.getActionCommand()) {
               case "Start":
                  doStart();
                  break;
               case "Stop":
                  doStop();
                  break;
            }
         }
      } );
   
      // CENTER components
      JPanel jpCenter = new JPanel();
      jpCenter.add(new JScrollPane(jtaLog));
      this.add(jpCenter, BorderLayout.CENTER);
      
      this.setVisible(true);
   } 
   
   public void doStart() 
   {
     // for(char i = 0; i < 26; i++) {
//       alphabet[i] = (char)('a' + i);
//      } 
      jbStart.setText("Stop");

      serverThread = new ServerThread();
      serverThread.start();
      jtaLog.append("Server started\n");
   }
   
   public void doStop() 
   {
      jbStart.setText("Start");
      serverThread.stopServer();
   }
   
   /**
    * Class ServerThread
    * A thread used to start the server when the Start button is pressed
    * Also, the stop method will stop the server
    */
   class ServerThread extends Thread {
      public void run() {
         // Server stuff ... wait for a connection and process it
         try 
         {
            sSocket = new ServerSocket(SERVER_PORT);
         }
         catch(IOException ioe) 
         {
            jtaLog.append("IO Exception (1): "+ ioe);
            return;
         }
         
         while(true) 
         {
            // Socket for the client
            Socket cSocket = null;
            
            try 
            {
               // Wait for a connection and set up IO
               cSocket = sSocket.accept();
            }
            catch(IOException ioe) 
            {
               // Happens when sSocket is closed in stop (below)
               // and the accept (above) is blocked. This is OK.
               jtaLog.append("IO Exception (2): "+ ioe);
               return;
            }   
            
            // Create a thread for the client
            ClientThread ct = new ClientThread(cSocket);
            ct.start();
            jtaLog.append("Client thread started\n");      
         }
      }
      
      public void stopServer() 
      {
         try 
         {
            sSocket.close();  // This terminates any blocked accepts
            cSocket.close();
            scn.close();
            pwt.close();
            fw.close();
            jtaLog.append(label + "Client disconnected!\n");
         }
         catch(Exception e) {
            jtaLog.append("Exception: " + e);
         }
      }
      
   }
   
   /**
    * Class ClientThread
    * A thread PER client to do the server side
    * stuff for one client
    */
   class ClientThread extends Thread 
   {
      // Since attributes are per-object items, each ClientThread has its OWN
      // socket, unique to that client
      
      // Constructor for ClientThread
      public ClientThread(Socket _cSocket) 
      {
         cSocket = _cSocket;
         label = cSocket.getInetAddress().getHostAddress() + " : " + cSocket.getPort() + " :: ";
      }
      
      // main program for a ClientThread
      public void run() 
      {
         
         jtaLog.append(label + "Client connected!\n");
         
         try 
         {
            // Set up IO
            scn = new Scanner(new InputStreamReader(cSocket.getInputStream()));
            pwt = new PrintWriter(new OutputStreamWriter(cSocket.getOutputStream()));
            fw = new PrintWriter(new FileWriter(new File(cSocket.getInetAddress().getHostAddress() + ".txt")));
            oos = new ObjectOutputStream(cSocket.getOutputStream());
            ois = new ObjectInputStream(cSocket.getInputStream());
         }
         catch(IOException ioe) 
         {
            jtaLog.append(label + "IO Exception (ClientThread): "+ ioe + "\n");
            return;
         }

         try{
            if(inval==true){
               System.out.println("Serving starting to read lines");
            }
            while(true){
            Object obj = ois.readObject();
               if(obj instanceof String){
                  String message = (String) obj;
                  if(inval==true){
                     System.out.println("Server read line" + message);
                  }
                  if(message.equals("ISTE121")){System.out.println("Server sending Accepted");oos.writeObject("ACCEPTED");System.out.println("Sent ACCEPTED");}
                  //oos.writeObject("ACCEPTED");
                  synchronized(jtaLog){
                     jtaLog.append(label + "Received(String): " + message + "\n");
                     jtaLog.append(label + "Replied(Struing): " + message.toUpperCase()+ "\n");
                     fw.println(label + "Received(String): " + message + "\n"+
                     label + "Replied(Struing): " + message.toUpperCase()+ "\n");
                  }//synch
               }
               else if(obj instanceof MailConstants){
                  MailConstants msg = (MailConstants)obj;
                  synchronized(jtaLog){
                     jtaLog.append(label + "Received(Mail): " + msg + "\n");
                     jtaLog.append(label + "Replied(Mail): " + msg+ "\n");
                  }//synch
               }
            }
         }
         catch(Exception e){}
         // Repeatedly, read a line from the client and send back
         // uppercase version
         // while(scn.hasNextLine()){
//             String message = scn.nextLine();
// //             char tempChar = 'A';
// //             String encoded = "";
// //             
// //             for(int i=0;i<message.length();i++){
// //                tempChar = message.charAt(i);
// //                int index = letters.indexOf(tempChar);
// //                encoded += alphabet[(index + shift) % 26];
// //             }//for
// //             pwt.println(encoded);
//             // if(message.equals("LOGIN")){
// //                pwt.println("LOGIN");
// //                nextMessage = scn.nextLine();
// //                pwt.println(nextMessage.toUpperCase());
// //                pwt.flush();
// //                synchronized(jtaLog){
// //                   jtaLog.append(label + "Received: " + message + "\n");
// //                   jtaLog.append(label + "Replied: " + message.toUpperCase()+ "\n");
// //                }//synch
// //                continue;
// //             }
// //             else{
// //                pwt.println(message.toLowerCase());
// //                synchronized(jtaLog){
// //                   jtaLog.append(label + "Received: " + message + "\n");
// //                   jtaLog.append(label + "Replied: " + message.toLowerCase()+ "\n");
// //                }//synch
// //                continue;
// //             }
//             synchronized(jtaLog){
//                   jtaLog.append(label + "Received: " + message + "\n");
//                   jtaLog.append(label + "Replied: " + message.toUpperCase()+ "\n");
//             }//synch
//          }
      }  
   } // End of inner class
}

