import java.io.*;
import java.net.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.util.*;

/**
 * SMTPServer ... goes with SMTPClient
 * Allows multiple connect/send/disconnect cycles
 * As many clients as we wish ... one thread per client
 * @author Kyrren Love, Brenden Apo, Visalakshi Natulapati & Anthony Fierce
 * @version 9-16-2017
 */
 public class SMTPServer4 extends JFrame {
   // GUI Components
   private JButton jbStart = new JButton("Start");
   private JTextArea jtaLog = new JTextArea(10, 35);
   private JTextArea jtaConnections = new JTextArea(10, 35);
   public static final long serialVersionUid = 01L;

   // Socket stuff
   private ServerSocket sSocket = null;
   public static final int SERVER_PORT = 42069;
   private ObjectOutputStream oos = null;
   private ObjectInputStream ois = null;
   
   private ServerThread serverThread = null;
   private char[] alphabet = new char[26];
   String letters = "abcdefghijklmnopqrstuvwxyz";
   private int shift = 3;
   private boolean inval = true;
   
   //client stuff
   private Socket cSocket;
   private PrintWriter fw;
   private PrintWriter pwt;
   private Scanner scn;
   private String label = "";
   private String email;
   private String nextMessage;
   private String s220="S: 220 ";//Connect code
   private String s250="S: 250 ";//Okay
   private String s354="S: 354 ";//End data of message
   private String s221="S: 221 ";//goodbye
   
   /**
    * main - main program
    */
   public static void main(String[] args) 
   {
      new SMTPServer4();
   }
   
   /**
    * Constructor, draw and set up GUI
    * Do server stuff
    */
   public SMTPServer4() 
   {
      // Window setup
      this.setTitle("SMTPServer");
      this.setSize(450, 500);
      this.setLocation(600, 50);
      this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      
      // NORTH components (Start/Stop button)
      JPanel jpNorth = new JPanel();
      jpNorth.setLayout(new FlowLayout(FlowLayout.RIGHT));
      jpNorth.add(jbStart);
      this.add(jpNorth, BorderLayout.NORTH);
      jbStart.addActionListener(new ActionListener(){
         public void actionPerformed(ActionEvent ae){
            switch(ae.getActionCommand()) {
               case "Start":
                  doStart();
                  //doRelay();
                  //jtaLog.append("Relay method");
                  break;
               case "Stop":
                  doStop();
                  break;
            }
         }
      } );
   
      // CENTER components
      JPanel jpCenter = new JPanel();
      jpCenter.add(new JScrollPane(jtaLog));
      this.add(jpCenter, BorderLayout.CENTER);
      
      JPanel jpSouth = new JPanel();
      jpSouth.add(new JLabel("Connected Clients: "));
      jpSouth.add(new JScrollPane(jtaConnections));
      this.add(jpSouth, BorderLayout.SOUTH);
      this.setVisible(true);
   } 
   
   public void doStart(){
     // for(char i = 0; i < 26; i++) {
//       alphabet[i] = (char)('a' + i);
//      } 
      jbStart.setText("Stop");

      serverThread = new ServerThread();
      serverThread.start();
      jtaLog.append("Server started\n");
   }
   
   public void doStop(){
      jbStart.setText("Start");
      serverThread.stopServer();
   }
   
   
   /**
    * Class ServerThread
    * A thread used to start the server when the Start button is pressed
    * Also, the stop method will stop the server
    */
   class ServerThread extends Thread{
      public void run(){
         // Server stuff ... wait for a connection and process it
         try{sSocket = new ServerSocket(SERVER_PORT);}
         catch(IOException ioe){jtaLog.append("IO Exception (1): "+ ioe);return;}
          
         while(true){
            // Socket for the client
            Socket cSocket = null;
            try{cSocket = sSocket.accept();}
            catch(IOException ioe){jtaLog.append("IO Exception (2): "+ ioe);return;}   
            // Create a thread for the client
            ClientThread ct = new ClientThread(cSocket);
            ct.start();
            jtaLog.append("Client thread started\n");    
         }
      }
      
      public void stopServer(){
         try{
            sSocket.close();  // This terminates any blocked accepts
            cSocket.close();
            fw.close();
            pwt.close();
            scn.close();
            jtaLog.append(label + "Client disconnected!\n");
         }
         catch(Exception e){jtaLog.append("Exception: " + e);}
      }
   }
   
   /**
    * Class ClientThread
    * A thread PER client to do the server side
    * stuff for one client
    */
   class ClientThread extends Thread {
      // Since attributes are per-object items, each ClientThread has its OWN
      // socket, unique to that client
      private Socket cSocket;
      private String label = "";

      // Constructor for ClientThread
      public ClientThread(Socket _cSocket) 
      {
         cSocket = _cSocket;
         label = cSocket.getInetAddress().getHostAddress() + " : " + cSocket.getPort() + " :: ";
      }
      
      // main program for a ClientThread
      public void run() {
         Scanner scn = null;
         PrintWriter pwt = null;
         jtaLog.append(label + "Client connected!\n");
         jtaConnections.append(label);
         try {
            // Set up IO
            scn = new Scanner(new InputStreamReader(cSocket.getInputStream()));
            pwt = new PrintWriter(new OutputStreamWriter(cSocket.getOutputStream()));
            fw = new PrintWriter(new FileWriter(new File(cSocket.getInetAddress().getHostAddress() + ".txt")));
         }
         catch(IOException ioe) 
         {
            jtaLog.append(label + "IO Exception (ClientThread): "+ ioe + "\n");
            return;
         }

         // Repeatedly, read a line from the client and send back
         // uppercase version
         while(scn.hasNextLine()){
            String username= scn.nextLine();
            String message = scn.nextLine();
            // char tempChar = 'A';
//             String encoded = "";
//             
//             for(int i=0;i<message.length();i++){
//                tempChar = message.charAt(i);
//                int index = letters.indexOf(tempChar);
//                encoded += alphabet[(index + shift) % 26];
//             }//for
            if(message.equals("ISTE121")){
               System.out.println("Server sending Accepted");
               pwt.println("ACCEPTED");
               System.out.println("Sent ACCEPTED");
               pwt.flush();
               synchronized(jtaLog){
                  jtaLog.append(label + "Received: " + message + "\n");
                  jtaLog.append(label + "Replied: ACCEPTED \n");
               }//synch
               // if(message.contains("HELO")){
                     //pwt.println(s250+"OK \n");
//                   continue
//                }
               if(message.contains("MAIL")){
                     String from = scn.nextLine();
                     jtaLog.append(from+"\n");
                     jtaLog.append(s250+"OK \n");
                     // pwt.println("OK \n");
//                      pwt.flush();
                     continue;
               }
               if(message.contains("RCPT")){
                     String rcptTo = scn.nextLine();
                     jtaLog.append(rcptTo+"\n");
                     jtaLog.append(s250+"OK \n");
                     // pwt.println("OK \n");
//                      pwt.flush();
                     continue;
               }
               if(message.contains("DATA")){
                     String data = scn.nextLine();
                     jtaLog.append(data+"\n");
                     jtaLog.append(s250+"OK \n");
                     // pwt.println("OK \n");
//                      pwt.flush();
                     continue;
               }
            }
            else if(message.equals("GET MAIL")){
               //return mail back to client.
            }
            else{
               pwt.println("DECLINED");
               pwt.flush();
               synchronized(jtaLog){
                  jtaLog.append(label + "Received: " + message + "\n");
                  jtaLog.append(s250+"Replied: OK\n");
               }//synch
            }
         }
      } 
      public void doRelay(){
         //MailConstants relay = _msg;
         try{
            Socket relaySocket = new Socket("129.21.102.209", SERVER_PORT);
            Scanner scn2 = new Scanner(new InputStreamReader(relaySocket.getInputStream()));
            PrintWriter pwt2 = new PrintWriter(new OutputStreamWriter(relaySocket.getOutputStream()));
            String hi = "HI BRENDAN YOU FAILURE";
            pwt.println(hi);
            while(scn.hasNextLine()){
               String messages = scn.nextLine();
               jtaLog.append(messages+"\n");
            }
        }
        catch(Exception e){}
   }  
   } // End of inner class
}
//Bully: 129.21.69.37
//Apollo: 129.21.103.53
//Me: 129.21.106.62
